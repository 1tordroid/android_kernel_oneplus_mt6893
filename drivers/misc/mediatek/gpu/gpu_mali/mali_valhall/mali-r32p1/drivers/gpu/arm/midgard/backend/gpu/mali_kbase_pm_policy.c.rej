--- drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_policy.c
+++ drivers/gpu/arm/midgard/backend/gpu/mali_kbase_pm_policy.c
@@ -33,59 +33,49 @@
 #include <csf/mali_kbase_csf_firmware.h>
 #endif
 
+#include <linux/of.h>
+
 static const struct kbase_pm_policy *const all_policy_list[] = {
-#ifdef CONFIG_MALI_NO_MALI
-	&kbase_pm_always_on_policy_ops,
 	&kbase_pm_coarse_demand_policy_ops,
-#if !MALI_CUSTOMER_RELEASE
-	&kbase_pm_always_on_demand_policy_ops,
-#endif
-#else				/* CONFIG_MALI_NO_MALI */
-	&kbase_pm_coarse_demand_policy_ops,
-#if !MALI_CUSTOMER_RELEASE
-	&kbase_pm_always_on_demand_policy_ops,
-#endif
 	&kbase_pm_always_on_policy_ops
-#endif /* CONFIG_MALI_NO_MALI */
 };
 
-#if MALI_USE_CSF
 void kbase_pm_policy_init(struct kbase_device *kbdev)
 {
-	unsigned long flags;
 	const struct kbase_pm_policy *default_policy = all_policy_list[0];
+	struct device_node *np = kbdev->dev->of_node;
+	const char *power_policy_name;
+	unsigned long flags;
+	int i;
 
-#if defined CONFIG_MALI_DEBUG
+	if (of_property_read_string(np, "power_policy", &power_policy_name) == 0) {
+		for (i = 0; i < ARRAY_SIZE(all_policy_list); i++)
+			if (sysfs_streq(all_policy_list[i]->name, power_policy_name)) {
+				default_policy = all_policy_list[i];
+				break;
+			}
+	}
+
+#if MALI_USE_CSF && defined(CONFIG_MALI_DEBUG)
 	/* Use always_on policy if module param fw_debug=1 is
 	 * passed, to aid firmware debugging.
 	 */
 	if (fw_debug)
 		default_policy = &kbase_pm_always_on_policy_ops;
 #endif
+
 	default_policy->init(kbdev);
 
+#if MALI_USE_CSF
 	spin_lock_irqsave(&kbdev->hwaccess_lock, flags);
 	kbdev->pm.backend.pm_current_policy = default_policy;
-	kbdev->pm.backend.csf_pm_sched_flags =
-				default_policy->pm_sched_flags;
+	kbdev->pm.backend.csf_pm_sched_flags = default_policy->pm_sched_flags;
 	spin_unlock_irqrestore(&kbdev->hwaccess_lock, flags);
-}
-#else /* MALI_USE_CSF */
-void kbase_pm_policy_init(struct kbase_device *kbdev)
-{
-	kbdev->pm.backend.pm_current_policy = all_policy_list[0];
-
-#if MALI_USE_CSF && defined CONFIG_MALI_DEBUG
-	/* Use always_on policy if module param fw_debug=1 is
-	 * passed, to aid firmware debugging.
-	 */
-	if (fw_debug)
-		kbdev->pm.backend.pm_current_policy =
-			&kbase_pm_always_on_policy_ops;
+#else
+	CSTD_UNUSED(flags);
+	kbdev->pm.backend.pm_current_policy = default_policy;
 #endif
-	kbdev->pm.backend.pm_current_policy->init(kbdev);
 }
-#endif /* MALI_USE_CSF */
 
 void kbase_pm_policy_term(struct kbase_device *kbdev)
 {
